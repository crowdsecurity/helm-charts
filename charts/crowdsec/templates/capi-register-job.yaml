{{- if .Values.lapi.enabled }}
  {{- if not (eq (include "IsOnlineAPIDisabled" .) "true") }}
    {{- if eq (include "StoreCAPICredentialsInSecret" .) "true" }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ .Release.Name }}-capi-register-job
  labels:
    k8s-app: {{ .Release.Name }}
    type: capi-register-job
    version: v1
    {{- if .Values.podLabels }}
{{ toYaml .Values.podLabels | trim | indent 4 }}
    {{- end }}
  annotations:
    "helm.sh/hook": "pre-install,pre-upgrade"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
    "helm.sh/hook-weight": "0"
spec:
  template:
    metadata:
      labels:
        k8s-app: {{ .Release.Name }}
        type: capi-register-job
        version: v1
        {{- if .Values.podLabels }}
{{ toYaml .Values.podLabels | trim | indent 8 }}
        {{- end }}
    spec:
      serviceAccountName: {{ .Release.Name }}-configmap-updater-sa
      restartPolicy: OnFailure
      {{- if .Values.image.pullSecrets }}
      imagePullSecrets:
{{ toYaml .Values.image.pullSecrets | indent 8 }}
      {{- end }}
      containers:
        - name: capi-register
          image: "{{ .Values.image.repository | default "crowdsecurity/crowdsec" }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command:
            - "/bin/bash"
            - "-c"
            - |
                apk update && apk add kubectl
                set -ex
                echo "Checking if the secret {{ .Release.Name }}-capi-credentials already exists..."
                if kubectl -n {{ .Release.Namespace }} get secret {{ .Release.Name }}-capi-credentials >/dev/null 2>&1; then
                  echo "Secret already exists. Skipping registration."
                  exit 0
                fi

                echo "Secret does not exist. Registering instance to Central API."
                sed -i /staging/etc/crowdsec/config.yaml -e 's/#credentials_path/  credentials_path/'

                yq -i '.api.server.online_client.credentials_path="/tmp/online_api_credentials.yaml" | .api.server.profiles_path="/staging/etc/crowdsec/profiles.yaml"' /staging/etc/crowdsec/config.yaml
                touch /tmp/online_api_credentials.yaml
                cscli -c /staging/etc/crowdsec/config.yaml capi register
                yq -i '.papi_url="https://papi.api.crowdsec.net/"' /tmp/online_api_credentials.yaml
                echo "Creating secret {{ .Release.Name }}-capi-credentials..."
                kubectl create secret generic {{ .Release.Name }}-capi-credentials \
                  -n {{ .Release.Namespace }} \
                  --from-file=online_api_credentials.yaml=/tmp/online_api_credentials.yaml
    {{- end }}
  {{- end }}
{{- end }}
