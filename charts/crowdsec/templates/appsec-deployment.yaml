# vim: set ft=gotmpl:
---

{{- if .Values.appsec.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-appsec
  labels:
    k8s-app: {{ .Release.Name }}
    type: appsec
    version: v1
  {{- if .Values.appsec.deployAnnotations }}
  annotations:
  {{ toYaml .Values.appsec.deployAnnotations | trim | indent 4 }}
  {{- end }}
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: {{ .Release.Name }}
      type: appsec
  strategy: {{- toYaml .Values.appsec.strategy | nindent 4 }}
  template:
    metadata:
      annotations:
        checksum/appsec-acquis-configmap: {{ include (print $.Template.BasePath "/appsec-configmap.yaml") . | sha256sum }}
        {{- if .Values.podAnnotations }}
        {{- toYaml .Values.podAnnotations | trim | indent 8 }}
        {{- end }}
        {{- if .Values.appsec.podAnnotations }}
        {{- toYaml .Values.appsec.podAnnotations | trim | indent 8 }}
        {{- end }}
      labels:
        k8s-app: {{ .Release.Name }}
        type: appsec
        version: v1
        {{- if .Values.podLabels }}
{{ toYaml .Values.podLabels | trim | indent 8 }}
        {{- else if .Values.appsec.podLabels }}
{{ toYaml .Values.appsec.podLabels | trim | indent 8 }}
        {{- end }}
    spec:
      {{- with .Values.appsec.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.image.pullSecrets }}
      imagePullSecrets:
{{ toYaml .Values.image.pullSecrets | indent 8 }}
      {{- end }}
      initContainers:
      - name: wait-for-lapi-and-register
        image: "{{ .Values.image.repository | default "crowdsecurity/crowdsec" }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        command: ['sh', '-c', 'until nc "$LAPI_HOST" "$LAPI_PORT" -z; do echo waiting for lapi to start; sleep 5; done; ln -s /staging/etc/crowdsec /etc/crowdsec && cscli lapi register --machine "$USERNAME" -u $LAPI_URL --token "$REGISTRATION_TOKEN" && cp /etc/crowdsec/local_api_credentials.yaml /tmp_config/local_api_credentials.yaml']
        resources:
          limits:
            memory: 50Mi
          requests:
            cpu: 1m
            memory: 10Mi
        securityContext:
          allowPrivilegeEscalation: false
          privileged: false
        volumeMounts:
          - name: crowdsec-config
            mountPath: /tmp_config
        env:
          - name: REGISTRATION_TOKEN
            valueFrom:
              secretKeyRef:
                name: crowdsec-lapi-secrets
                key: registrationToken
          - name: USERNAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: LAPI_URL
            value: http://{{ .Release.Name }}-service.{{ .Release.Namespace }}:8080
          - name: LAPI_HOST
            value: "{{ .Release.Name }}-service.{{ .Release.Namespace }}"
          - name: LAPI_PORT
            value: "8080"
      {{- if .Values.appsec.extraInitContainers }}
      {{- toYaml .Values.appsec.extraInitContainers | nindent 6 }}
      {{- end }}
      containers:
      - name: crowdsec-appsec
        image: "{{ .Values.image.repository | default "crowdsecurity/crowdsec" }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        command: ['sh', '-c', 'cp /tmp_config/local_api_credentials.yaml /staging/etc/crowdsec/local_api_credentials.yaml && ./docker_start.sh']
        env:
          - name: DISABLE_LOCAL_API
            value: "true"
          - name: DISABLE_ONLINE_API
            value: "true"
          - name: LOCAL_API_URL
            value: http://{{ .Release.Name }}-service.{{ .Release.Namespace }}:8080
        {{- with .Values.appsec.env }}
          {{- toYaml . | nindent 10 }}
        {{- end }}
        volumeMounts:
          - name: crowdsec-config
            mountPath: /tmp_config
          - name: appsec-acquis-config-volume
            mountPath: /etc/crowdsec/acquis.yaml
            subPath: acquis.yaml
          {{- if .Values.appsec.configs -}}
          {{- range $fileName, $content := .Values.appsec.configs }}
          - name: {{ printf "crowdsec-appsec-configs-%s" (trimSuffix ".yaml" $fileName) }}
            mountPath: {{ printf "/etc/crowdsec/appsec-configs/%s" $fileName }}
            subPath: {{ $fileName }}
          {{- end }}
          {{- end }}
          {{- if .Values.appsec.rules -}}
          {{- range $fileName, $content := .Values.appsec.rules }}
          - name: {{ printf "crowdsec-appsec-rules-%s" (trimSuffix ".yaml" $fileName) }}
            mountPath: {{ printf "/etc/crowdsec/appsec-rules/%s" $fileName }}
            subPath: {{ $fileName }}
          {{- end }}
          {{- end }}
        resources:
          {{- toYaml .Values.appsec.resources | nindent 10 }}
        ports:
          - name: appsec
            containerPort: 7422
            protocol: TCP
          {{- if .Values.appsec.metrics.enabled }}
          - name: metrics
            containerPort: 6060
            protocol: TCP
          {{- end }}

        livenessProbe:
          failureThreshold: 3
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
          tcpSocket:
            port: appsec
        readinessProbe:
          failureThreshold: 3
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
          tcpSocket:
            port: appsec
        startupProbe:
          failureThreshold: 30
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
          tcpSocket:
            port: appsec

        securityContext:
          allowPrivilegeEscalation: false
          privileged: false

        terminationGracePeriodSeconds: 30

       {{- with .Values.appsec.nodeSelector }}
        nodeSelector:
          {{- toYaml . | nindent 8 }}
        {{- end }}
        {{- with .Values.appsec.affinity }}
        affinity:
          {{- toYaml . | nindent 8 }}
        {{- end }}
        {{- if .Values.appsec.priorityClassName }}
        priorityClassName: {{ .Values.appsec.priorityClassName }}
        {{- end}}
      
      volumes:
      - name: appsec-acquis-config-volume
        configMap:
          name: appsec-acquis-config
      - name: crowdsec-config
        emptyDir: {}
      {{- if .Values.appsec.configs -}}
      {{- range $fileName, $content := .Values.appsec.configs }}
      - name: {{ printf "crowdsec-appsec-configs-%s" (trimSuffix ".yaml" $fileName) }}
        configMap:
          name: "crowdsec-appsec-configs"
          items:
          - key: {{ $fileName }}
            path: {{ $fileName }}
      {{- end }}
      {{- end }}
      {{- if .Values.appsec.rules -}}
      {{- range $fileName, $content := .Values.appsec.rules }}
      - name: {{ printf "crowdsec-appsec-rules-%s" (trimSuffix ".yaml" $fileName) }}
        configMap:
          name: "crowdsec-appsec-rules"
          items:
          - key: {{ $fileName }}
            path: {{ $fileName }}
      {{- end }}
      {{- end }}
{{- end }}