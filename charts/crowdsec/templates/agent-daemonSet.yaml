apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: {{ .Release.Name }}-agent
  labels:
    k8s-app: {{ .Release.Name }}
    type: agent
    version: v1
spec:
  selector:
    matchLabels:
      k8s-app: {{ .Release.Name }}
      type: agent
  template:
    metadata:
      labels:
        k8s-app: {{ .Release.Name }}
        type: agent
        version: v1
    spec:
      {{- with .Values.agent.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      initContainers:
      - name: wait-for-lapi
        image: "{{ .Values.agent.wait_for_lapi.image.repository }}:{{ .Values.agent.wait_for_lapi.image.tag }}"
        imagePullPolicy: {{ .Values.agent.wait_for_lapi.image.pullPolicy }}
        command: ['sh', '-c', "until nc {{ .Release.Name }}-service.{{ .Release.Namespace }} 8080; do echo waiting for lapi to start; sleep 5; done"]
      containers:
      - name: crowdsec-agent
        image: "{{ .Values.image.repository | default "crowdsecurity/crowdsec" }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        env:
          - name: AGENT_USERNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: AGENT_PASSWORD
            valueFrom:
              secretKeyRef:
                name: agent-credentials
                key: password
          - name: LOCAL_API_URL
            value: http://{{ .Release.Name }}-service.{{ .Release.Namespace }}:8080
          - name: DISABLE_LOCAL_API
            value: "true"
        {{- with .Values.agent.env }}
          {{- toYaml . | nindent 10 }}
        {{- end }}
        resources:
          {{- toYaml .Values.agent.resources | nindent 10 }}
        {{ if .Values.agent.metrics.enabled }}
        ports:
          - name: metrics
            containerPort: 6060
            protocol: TCP
        {{ end }}

        {{- if .Values.agent.persistentVolume.config.enabled }}
        command: ['sh', '-c', 'mv -n /staging/etc/crowdsec/* /etc/crowdsec_data/ && rm -rf /staging/etc/crowdsec && ln -s /etc/crowdsec_data /etc/crowdsec && ./docker_start.sh']
        {{- end }}
        volumeMounts:
          {{- if .Values.agent.persistentVolume.config.enabled }}
          - name: crowdsec-agent-config
            mountPath: /etc/crowdsec_data
          - name: acquis-config-volume
            mountPath: /etc/crowdsec_data/acquis.yaml
            subPath: acquis.yaml
          {{- else }}
          - name: acquis-config-volume
            mountPath: /etc/crowdsec/acquis.yaml
            subPath: acquis.yaml
          {{- end }}
          - name: varlog
            mountPath: /var/log
          - name: varlibdockercontainers
            mountPath: /var/lib/docker/containers
            readOnly: true
      terminationGracePeriodSeconds: 30
      volumes:
      - name: acquis-config-volume
        configMap:
          name: acquis-configmap
      - name: varlog
        hostPath:
          path: /var/log
      {{- if .Values.agent.persistentVolume.config.enabled }}
      - name: crowdsec-agent-config
        persistentVolumeClaim:
          claimName: {{ .Release.Name }}-agent-config-pvc
      {{- end }}
      - name: varlibdockercontainers
        hostPath:
          path: /var/lib/docker/containers
      {{- with .Values.agent.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.agent.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
