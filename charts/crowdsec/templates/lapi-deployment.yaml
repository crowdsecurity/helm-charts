apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-lapi
  labels:
    k8s-app: {{ .Release.Name }}
    type: lapi
    version: v1
spec:
  selector:
    matchLabels:
      k8s-app: {{ .Release.Name }}
      type: lapi
  strategy: {{- toYaml .Values.lapi.strategy | nindent 4 }}
  template:
    metadata:
      labels:
        k8s-app: {{ .Release.Name }}
        type: lapi
        version: v1
    spec:
      serviceAccountName: {{ .Release.Name }}-lapi
      initContainers:
      {{ if .Values.lapi.dashboard.enabled }}
      - name: fetch-metabase-config
        image: busybox:1.28
        imagePullPolicy: IfNotPresent
        command: ['sh', '-c', 'wget {{ .Values.lapi.dashboard.assetURL }} && unzip metabase_sqlite.zip -d /metabase-data/']
        volumeMounts:
        - name: shared-data
          mountPath: /metabase-data
      {{ end }}
      - name: kubectl
        image: bitnami/kubectl
        imagePullPolicy: IfNotPresent
        command:
        - sh
        - -euxc
        - kubectl get nodes -o jsonpath='{range .items[*]}{.metadata.name}{"\n"}{end}' --no-headers > /etc/init/nodes.txt
        volumeMounts:
          - name: init
            mountPath: /etc/init
      - name: register
        image: "{{ .Values.image.repository | default "crowdsecurity/crowdsec" }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        {{- if .Values.lapi.persistentVolume.config.enabled }}
        command: ['sh', '-euc', 'mv -n /staging/etc/crowdsec/* /etc/crowdsec_data/ && rm -rf /staging/etc/crowdsec && ln -s /etc/crowdsec_data /etc/crowdsec && cp -r /staging/etc/* /etc/ && (cat /etc/init/nodes.txt | xargs -I{} cscli -c "/etc/crowdsec/config.yaml" machines add {} --password "$(AGENT_PASSWORD)")']
        {{- else }}
        command: ['sh', '-euc', 'cp -r /staging/etc/* /etc/ && (cat /etc/init/nodes.txt | xargs -I{} cscli -c "/etc/crowdsec/config.yaml" machines add {} --password "$(AGENT_PASSWORD)")']
        {{- end }}
        env:
          - name: AGENT_PASSWORD
            valueFrom:
              secretKeyRef:
                name: agent-credentials
                key: password
        volumeMounts:
          - name: init
            mountPath: /etc/init
          - name: crowdsec-db
            mountPath: /var/lib/crowdsec/data
          - name: crowdsec-config
            mountPath: /etc/crowdsec_data
      containers:
      - name: crowdsec-lapi
        image: "{{ .Values.image.repository | default "crowdsecurity/crowdsec" }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        env:
          - name: DISABLE_AGENT
            value: "true"
        {{- with .Values.lapi.env }}
          {{- toYaml . | nindent 10 }}
        {{- end }}
        resources:
          {{- toYaml .Values.lapi.resources | nindent 10 }}
        ports:
          - name: lapi
            containerPort: 8080
            protocol: TCP
            {{ if .Values.lapi.metrics.enabled }}
          - name: metrics
            containerPort: 6060
            protocol: TCP
            {{ end }}
        {{- if .Values.lapi.persistentVolume.config.enabled }}
        command: ['sh', '-c', 'mv -n /staging/etc/crowdsec/* /etc/crowdsec_data/ && rm -rf /staging/etc/crowdsec && ln -s /etc/crowdsec_data /etc/crowdsec && ./docker_start.sh']
        {{- end }}
        volumeMounts:
          - name: crowdsec-db
            mountPath: /var/lib/crowdsec/data
          - name: crowdsec-config
            mountPath: /etc/crowdsec_data
      {{- if .Values.lapi.dashboard.enabled }}
      - name: dashboard
        image: "{{ .Values.lapi.dashboard.image.repository | default "metabase/metabase" }}:{{ .Values.lapi.dashboard.image.tag | default "latest" }}"
        imagePullPolicy: {{ .Values.lapi.dashboard.image.pullPolicy }}
        volumeMounts:
        - name: shared-data
          mountPath: /metabase-data
        - name: crowdsec-db
          mountPath: /var/lib/crowdsec/data
        env:
          - name: MB_DB_FILE
            value: /metabase-data/metabase.db
      {{- end }}
      terminationGracePeriodSeconds: 30
      volumes:
      - name: init
        emptyDir: {}
      {{- if .Values.lapi.dashboard.enabled }}
      - name: shared-data
        emptyDir: {}
      {{- end }}
      {{- if .Values.lapi.persistentVolume.data.enabled }}
      - name: crowdsec-db
        persistentVolumeClaim:
          claimName: {{ .Release.Name }}-db-pvc
      {{- else }}
      - name: crowdsec-db
        emptyDir: {}
      {{- end }}
      {{- if .Values.lapi.persistentVolume.config.enabled }}
      - name: crowdsec-config
        persistentVolumeClaim:
          claimName: {{ .Release.Name }}-config-pvc
      {{- else }}
      - name: crowdsec-config
        emptyDir: {}
      {{- end }}
      {{- with .Values.lapi.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.lapi.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.lapi.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
