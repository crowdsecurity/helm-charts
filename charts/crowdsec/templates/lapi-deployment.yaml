apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-lapi
  labels:
    k8s-app: {{ .Release.Name }}
    type: lapi
    version: v1
spec:
  selector:
    matchLabels:
      k8s-app: {{ .Release.Name }}
      type: lapi
  strategy: {{- toYaml .Values.lapi.strategy | nindent 4 }}
  template:
    metadata:
      labels:
        k8s-app: {{ .Release.Name }}
        type: lapi
        version: v1
    spec:
      containers:
      - name: crowdsec-lapi
        image: "{{ .Values.image.repository | default "crowdsecurity/crowdsec" }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        env:
          - name: AGENT_USERNAME
            valueFrom:
              secretKeyRef:
                name: agent-credentials
                key: username
          - name: AGENT_PASSWORD
            valueFrom:
              secretKeyRef:
                name: agent-credentials
                key: password
          - name: DISABLE_AGENT
            value: "true"
        {{- with .Values.lapi.env }}
          {{- toYaml . | nindent 10 }}
        {{- end }}
        resources:
          {{- toYaml .Values.lapi.resources | nindent 10 }}
        ports:
          - name: lapi
            containerPort: 8080
            protocol: TCP
            {{ if .Values.lapi.metrics.enabled }}
          - name: metrics
            containerPort: 6060
            protocol: TCP
            {{ end }}
        {{ if .Values.lapi.persistentVolume.config.enabled }}
        command: ['sh', '-c', 'mv -n /staging/etc/crowdsec/* /etc/crowdsec_data/ && rm -rf /staging/etc/crowdsec && ln -s /etc/crowdsec_data /etc/crowdsec && ./docker_start.sh']
        {{ end }}
        {{- if or (.Values.lapi.persistentVolume.data.enabled) (.Values.lapi.persistentVolume.config.enabled) (.Values.dashboard.enabled) (include "lapiCustomConfigIsNotEmpty" .) }}
        volumeMounts:
          {{ if or (.Values.lapi.persistentVolume.data.enabled) (.Values.dashboard.enabled) }}
          - name: crowdsec-db
            mountPath: /var/lib/crowdsec/data
          {{ end }}
          {{- $crowdsecConfig := "/etc/crowdsec" -}}
          {{- if .Values.lapi.persistentVolume.config.enabled -}}
          {{- $crowdsecConfig = "/etc/crowdsec_data" -}}
          - name: crowdsec-config
            mountPath: {{ $crowdsecConfig }}
          {{- end }}
          {{ if index .Values.config "profiles.yaml" }}
          - name: crowdsec-profiles-volume
            mountPath: {{ $crowdsecConfig }}/profiles.yaml
            subPath: profiles.yaml
          {{ end }}
          {{ if index .Values.config "console.yaml" }}
          - name: crowdsec-console-volume
            mountPath: {{ $crowdsecConfig }}/console.yaml
            subPath: console.yaml
          {{ end }}
          {{- if (include "notificationsIsNotEmpty" .) -}}
          {{ range $fileName, $content := .Values.config.notifications -}}
          {{- if $content }}
          - name: crowdsec-notifications-{{ (trimSuffix ".yaml" $fileName) }}
            mountPath: {{ printf "%s/notifications/%s" $crowdsecConfig $fileName }}
            subPath: {{ $fileName }}
          {{- end }}
          {{- end }}
          {{- end }}
          {{- end }}
      terminationGracePeriodSeconds: 30
      {{- if or (.Values.lapi.persistentVolume.data.enabled) (.Values.lapi.persistentVolume.config.enabled) (.Values.dashboard.enabled) (include "lapiCustomConfigIsNotEmpty" .) }}
      volumes:
      {{- if .Values.lapi.persistentVolume.data.enabled }}
      - name: crowdsec-db
        persistentVolumeClaim:
          {{ if .Values.lapi.persistentVolume.data.existingClaim }}
          claimName: {{ .Values.lapi.persistentVolume.data.existingClaim }}
          {{ else }}
          claimName: {{ .Release.Name }}-db-pvc
          {{ end }}
      {{- else if .Values.dashboard.enabled }}
      - name: crowdsec-db
        emptyDir: {}
      {{- end }}
      {{- if .Values.lapi.persistentVolume.config.enabled }}
      - name: crowdsec-config
        persistentVolumeClaim:
          {{ if .Values.lapi.persistentVolume.config.existingClaim }}
          claimName: {{ .Values.lapi.persistentVolume.config.existingClaim }}
          {{ else }}
          claimName: {{ .Release.Name }}-config-pvc
          {{ end }}
      {{- end }}
      {{ if index .Values.config "profiles.yaml" }}
      - name: crowdsec-profiles-volume
        configMap:
          name: crowdsec-profiles
      {{- end }}
      {{ if index .Values.config "console.yaml" }}
      - name: crowdsec-console-volume
        configMap:
          name: crowdsec-console
      {{- end }}
      {{- if (include "notificationsIsNotEmpty" .) -}}
      {{ range $fileName, $content := .Values.config.notifications -}}
      {{- if $content }}
      - name: crowdsec-notifications-{{ (trimSuffix ".yaml" $fileName) }}
        configMap:
          name: crowdsec-notifications
          items:
          - key: {{ $fileName }}
            path: {{ $fileName }}
      {{ end }}
      {{- end }}
      {{- end }}
      {{- end }}
      {{- with .Values.lapi.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.lapi.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.lapi.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
