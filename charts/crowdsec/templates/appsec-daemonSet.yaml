# vim: set ft=gotmpl:
---
{{- if .Values.appsec.enabled }}
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: {{ .Release.Name }}-appsec
  labels:
    k8s-app: {{ .Release.Name }}
    type: appsec
    version: v1
  {{- if .Values.appsec.daemonsetAnnotations }}
  annotations:
{{ toYaml .Values.appsec.daemonsetAnnotations | trim | indent 4 }}
  {{- end }}
spec:
  selector:
    matchLabels:
      k8s-app: {{ .Release.Name }}
      type: appsec
  template:
    metadata:
      annotations:
        checksum/acquis-configmap: {{ include (print $.Template.BasePath "/acquis-configmap.yaml") . | sha256sum }}
        {{- if .Values.podAnnotations }}
{{ toYaml .Values.podAnnotations | trim | indent 8 }}
        {{- end }}
        {{- if .Values.appsec.podAnnotations }}
{{ toYaml .Values.appsec.podAnnotations | trim | indent 8 }}
        {{- end }}
      labels:
        k8s-app: {{ .Release.Name }}
        type: appsec
        version: v1
        {{- if .Values.podLabels }}
{{ toYaml .Values.podLabels | trim | indent 8 }}
        {{- else if .Values.appsec.podLabels }}
{{ toYaml .Values.appsec.podLabels | trim | indent 8 }}
        {{- end }}
    spec:
      {{- with .Values.appsec.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.image.pullSecrets }}
      imagePullSecrets:
{{ toYaml .Values.image.pullSecrets | indent 8 }}
      {{- end }}
      initContainers:
      - name: wait-for-lapi
        image: "{{ .Values.appsec.wait_for_lapi.image.repository }}:{{ .Values.appsec.wait_for_lapi.image.tag }}"
        imagePullPolicy: {{ .Values.appsec.wait_for_lapi.image.pullPolicy }}
        command: ['sh', '-c', "until nc {{ .Release.Name }}-service.{{ .Release.Namespace }} 8080 -z; do echo waiting for lapi to start; sleep 5; done"]
        resources:
          limits:
            memory: 50Mi
          requests:
            cpu: 1m
            memory: 10Mi
        securityContext:
          allowPrivilegeEscalation: false
          privileged: false
      {{- if .Values.appsec.extraInitContainers }}
      {{- toYaml .Values.appsec.extraInitContainers | nindent 6 }}
      {{- end }}
      containers:
      - name: crowdsec-appsec
        image: "{{ .Values.image.repository | default "crowdsecurity/crowdsec" }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        env:
          - name: DISABLE_LOCAL_API
            value: "true"
          - name: DISABLE_ONLINE_API
            value: "true"

          # appsec - lapi authentication, with TLS or password

          {{- if .Values.tls.enabled }}
          - name: LOCAL_API_URL
            value: https://{{ .Release.Name }}-service.{{ .Release.Namespace }}:8080
          - name: USE_TLS
            value: "true"
          {{- if .Values.tls.agent.tlsClientAuth }}
          - name: CLIENT_CERT_FILE
            value: /etc/ssl/crowdsec-agent/tls.crt
          - name: CLIENT_KEY_FILE
            value: /etc/ssl/crowdsec-agent/tls.key
          {{- end }}
          {{- if .Values.tls.caBundle }}
          - name: CACERT_FILE
            value: /etc/ssl/crowdsec-agent/ca.crt
          {{- end }}
          {{- else }}
          - name: LOCAL_API_URL
            value: http://{{ .Release.Name }}-service.{{ .Release.Namespace }}:8080
          {{- end }}
          {{- if or (not .Values.tls.enabled) (not .Values.tls.agent.tlsClientAuth) }}
          - name: AGENT_USERNAME
            valueFrom:
              secretKeyRef:
                name: agent-credentials
                key: username
          - name: AGENT_PASSWORD
            valueFrom:
              secretKeyRef:
                name: agent-credentials
                key: password
          {{- end }}
          {{- if .Values.tls.insecureSkipVerify }}
          - name: INSECURE_SKIP_VERIFY
            value: {{ quote .Values.tls.insecureSkipVerify }}
          {{- end }}

        {{- with .Values.appsec.env }}
          {{- toYaml . | nindent 10 }}
        {{- end }}
        resources:
          {{- toYaml .Values.appsec.resources | nindent 10 }}
        ports:
          - name: appsec
            containerPort: 7422
            protocol: TCP
          {{- if .Values.appsec.metrics.enabled }}
          - name: metrics
            containerPort: 6060
            protocol: TCP
          {{- end }}

        {{/* Probes depend on the metrics port, there is no other service on the log processor */}}

        {{ if .Values.appsec.livenessProbe }}
        livenessProbe:
{{ toYaml .Values.appsec.livenessProbe | indent 10 }}
        {{ end }}
        {{ if .Values.appsec.readinessProbe }}
        readinessProbe:
{{ toYaml .Values.appsec.readinessProbe | indent 10 }}
        {{ end }}
        {{ if .Values.appsec.startupProbe }}
        startupProbe:
{{ toYaml .Values.appsec.startupProbe | indent 10 }}
        {{ end }}

        {{ end }}

        securityContext:
          allowPrivilegeEscalation: false
          privileged: false

        {{- if .Values.appsec.persistentVolume.config.enabled }}
        command: ['sh', '-c', 'mv -n /staging/etc/crowdsec/* /etc/crowdsec_data/ && rm -rf /staging/etc/crowdsec && ln -s /etc/crowdsec_data /etc/crowdsec && ./docker_start.sh']
        {{- end }}
        volumeMounts:
          - name: crowdsec-config
            mountPath: /tmp_config
          - name: appsec-acquis-config-volume
            mountPath: /etc/crowdsec/acquis.yaml
            subPath: acquis.yaml
          {{- if .Values.appsec.configs -}}
          {{- range $fileName, $content := .Values.appsec.configs }}
          - name: {{ printf "crowdsec-appsec-configs-%s" (trimSuffix ".yaml" $fileName) }}
            mountPath: {{ printf "/etc/crowdsec/appsec-configs/%s" $fileName }}
            subPath: {{ $fileName }}
          {{- end }}
          {{- end }}
          {{- if .Values.appsec.rules -}}
          {{- range $fileName, $content := .Values.appsec.rules }}
          - name: {{ printf "crowdsec-appsec-rules-%s" (trimSuffix ".yaml" $fileName) }}
            mountPath: {{ printf "/etc/crowdsec/appsec-rules/%s" $fileName }}
            subPath: {{ $fileName }}
          {{- end }}
          {{- end }}
          {{- if .Values.tls.enabled }}
          - name: crowdsec-agent-tls
            mountPath: /etc/ssl/crowdsec-agent
          {{- end }}
          {{- if .Values.appsec.extraVolumeMounts }}
          {{ toYaml .Values.appsec.extraVolumeMounts | nindent 10 }}
          {{- end }}

      terminationGracePeriodSeconds: 30
      volumes:
       - name: appsec-acquis-config-volume
        configMap:
          name: appsec-acquis-config
      - name: crowdsec-config
        emptyDir: {}
      {{- if .Values.appsec.configs -}}
      {{- range $fileName, $content := .Values.appsec.configs }}
      - name: {{ printf "crowdsec-appsec-configs-%s" (trimSuffix ".yaml" $fileName) }}
        configMap:
          name: "crowdsec-appsec-configs"
          items:
          - key: {{ $fileName }}
            path: {{ $fileName }}
      {{- end }}
      {{- end }}
      {{- if .Values.appsec.rules -}}
      {{- range $fileName, $content := .Values.appsec.rules }}
      - name: {{ printf "crowdsec-appsec-rules-%s" (trimSuffix ".yaml" $fileName) }}
        configMap:
          name: "crowdsec-appsec-rules"
          items:
          - key: {{ $fileName }}
            path: {{ $fileName }}
      {{- end }}
      {{- end }}
      {{- if .Values.tls.enabled }}
      - name: crowdsec-agent-tls
        secret:
          secretName: {{ .Release.Name }}-agent-tls
      {{- end }}
      {{- if .Values.appsec.extraVolumes }}
      {{ toYaml .Values.appsec.extraVolumes | nindent 6 }}
      {{- end }}
      {{- with .Values.appsec.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.appsec.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      priorityClassName: {{ .Values.appsec.priorityClassName }}
{{- end }}